/**
 * fifteen.c
 *
 * Computer Science 50
 * Problem Set 3
 *
 * Implements Game of Fifteen (generalized to d x d).
 *
 * Usage: fifteen d
 *
 * whereby the board's dimensions are to be d x d,
 * where d must be in [DIM_MIN,DIM_MAX]
 *
 * Note that usleep is obsolete, but it offers more granularity than
 * sleep and is simpler to use than nanosleep; `man usleep` for more.
 */
 
#define _XOPEN_SOURCE 500

#include <cs50.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

// constants
#define MIN 3
#define MAX 9

// board
int board[MAX][MAX];

// dimensions
int d;

// prototypes
void clear(void);
void greet(void);
void init(void);
void draw(void);
bool move(int tile);
bool won(void);

int main(int argc, string argv[])
{
        // greet player
        greet();

        // ensure proper usage
        if (argc != 2)
        {
                printf("Usage: ./fifteen d\n");
                return 1;
        }

        // ensure valid dimensions
        d = atoi(argv[1]);
        if (d < MIN || d > MAX)
        {
                printf("Board must be between %i x %i and %i x %i, inclusive.\n",
                       MIN, MIN, MAX, MAX);
                return 2;
        }

        // initialize the board
        init();

        // accept moves until game is won
        while (true)
        {
                // clear the screen
                clear();
                // draw the current state of the board
                draw();

                // check for win
                if (won())
                {
                        printf("ftw!\n");
                        break;
                }

                // prompt for move
                printf("Tile to move: ");
                int tile = GetInt();

                // move if possible, else report illegality
                if (!move(tile))
                {
                        printf("\nIllegal move.\n");
                        usleep(500000);
                }

                // sleep for animation's sake
                usleep(500000);
        }

        // that's all folks
        return 0;
}

/**
 * Clears screen using ANSI escape sequences.
 */
void clear(void)
{
        printf("\033[2J");
        printf("\033[%d;%dH", 0, 0);
}

/**
 * Greets player.
 */
void greet(void)
{
    clear();
    printf("WELCOME TO GAME OF FIFTEEN\n");
    usleep(2000000);
}

/**
 * Initializes the game's board with tiles numbered 1 through d*d - 1
 * (i.e., fills 2D array with values but does not actually print them).  
 */
void init(void)
{
    // TODO
    int i,j,c=1;
    for (i=0;i<d;i++)
    {
        for(j=0;j<d;j++)
        {
            board[i][j]=(d*d)-c;
            c++;
        }
    }
    if(d%2==0)
    {
        board[d-1][d-3]=1;
        board[d-1][d-2]=2;
    }
    for(i=0;i<d;i++)
    {
        for(j=0;j<d;j++)
        {
            printf("%d",board[i][j]);
        }
        printf("\n");
    }
}

/**
 * Prints the board in its current state.
 */
void draw(void)
{
    // TODO
    int i,j;
    for(i=0;i<d;i++)
    {
        for(j=0;j<d;j++)
        {
            if(board[i][j]==0)
            {
                printf("_");
            }
            else
            {
                printf("%2d ",board[i][j]);
            }
        }
        printf("\n");
    }
}

/**
 * If tile borders empty space, moves tile and returns true, else
 * returns false. 
 */
bool move(int tile)
{
    // TODO
    int i,j,x,y,k,nx,ny,cp=0,c=0;
    int temp;
    if (tile > ((d * d) - 1)) 
    {
        return false;
    }
    for(i=0;i<d;i++)
    {
        for(j=0;j<d;j++)
        {
            if(board[i][j]==tile)
            {
                x=i;
                y=j;
                c=1;
                break;
            }
        }
    }
    if(c==1)
    {
        for(k=-1;k<=1;k=k+2)
        {
           if(board[x][y+k]==0)
           {
                nx=x;
                ny=y+k;
                cp=1;
                break;
           }
           else if(board[x+k][y]==0)
           {
                nx=x+k;
                ny=j;
                cp=1;
                break;
           }
        }
        
    }
    if(cp==1)
    {
        temp=board[x][y];
        board[nx][ny]=temp;
        board[x][y]=0;
        nx=x;
        ny=y;
        return true;
    }
    else
    {
        return false;
    }
    
}

/**
 * Returns true if game is won (i.e., board is in winning configuration), 
 * else false.
 */
bool won(void)
{
    // TODO
    int i,j;
    int c=0,p=1;
    for (i=0;i<d;i++)
    {
        for(j=0;j<d;j++)
        {
            if(!(i==(d-1) && j==(d-1)))
            {
                if(board[i][j]!=p)
                {
                    c=1;
                    break;
                }
            }
            p=p+1;
        }
    }
    if(c==1)
    {
        return true;
    }
    else
    {
        return false;
    }
}
